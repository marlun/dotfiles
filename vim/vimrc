" Vim configuration file by Martin Lundberg <martin.lundberg@gmail.com>

" Plugins ------------------------------------------------------------------- {{{

call plug#begin('~/.vim/bundle')

Plug 'marlun/vim-marlun'
Plug 'marlun/vim-starwars'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-fugitive'
Plug 'bronson/vim-trailing-whitespace'
Plug 'jiangmiao/auto-pairs'
Plug 'pgdouyon/vim-niffler'
Plug 'scrooloose/syntastic'
Plug 'SirVer/ultisnips'
Plug 'ludovicchabant/vim-gutentags'
Plug 'regedarek/ZoomWin'
Plug 'wellle/targets.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] }
Plug 'sukima/xmledit', { 'for': ['html', 'smarty'] }
Plug 'kylef/apiblueprint.vim'

if has('lua') && has('patch-7.3.885')
	Plug 'Shougo/neocomplete'
	Plug 'Shougo/vimproc.vim', { 'do': 'make' }
else
	Plug 'Shougo/neocomplcache.vim'
endif

call plug#end()

" }}}
" General ------------------------------------------------------------------ {{{

" Enable syntax highlighting and choose colorscheme
syntax on

" Load my own colorscheme if available but fallback
" to one that comes with vim
if findfile('colors/leya.vim', &rtp) != ''
	colorscheme darth
elseif findfile('colors/darth.vim', &rtp) != ''
	colorscheme darth
else
	colorscheme delek
endif

" Make sure vim uses UTF-8
set encoding=utf-8

" Make the unnamed register the "* register
set clipboard=unnamed

" Don't save swap-files for recovery
set noswapfile

" Move vim backup files
set directory=~/tmp,/var/tmp,/tmp

" To make it easier to search for things I make vim ignore case except when
" the search pattern contains upper case characters
set ignorecase smartcase

" Enable an improved command completion menu
set wildmode=list:longest,full
set wildignorecase
set wildignore+=DS_Store,*/node_modules/*,*/smarty/*,*/tiny_mce/*,*/bower_components/*

" Do upward search for tags file
set tags=./tags;,tags;

" Try safe (:h secure) source of project specific .vimrc file
set exrc
set secure

" Add swedish as a recognized language when spellchecking
set spelllang=en,sv

" Add dictionary for completion
set dictionary=/usr/share/dict/words

" }}}
" Interface ---------------------------------------------------------------- {{{

" Allow putting buffers in the background
set hidden

" Allways show the mode that vim is in
set noshowmode

" Show partial commands as you type them.
set showcmd

" Always show a statusline
set laststatus=2

" Tell vim to use all abbrevations when showing messages
set shortmess+=a

" Don't highlight very long lines
set synmaxcol=150

" Don't redraw while executing macros, registers, etc.
set lazyredraw

" Highlight search matches and use incremental search
set hlsearch
set incsearch

" Make the statusline a lot more useful
set statusline=%f " Filename
set statusline+=\ %m%r%w " Modified, Readonly and Preview flags
set statusline+=%= " Switch to right side
" set statusline+=%{fugitive#head()}\ 
set statusline+=[%l/%L:%v] " Cursor position

" Makes it possible to have different cursor types for different modes.
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
elseif !has("gui_running")
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}
" Editor ------------------------------------------------------------------- {{{

" In vi the backspace key could normally only delete the text inserted in the
" current edit session. I want the backspace key to be able to remove
" everything so I add everything (see :h 'backspace')
set backspace+=indent,eol,start

" Disable line-wrapping
set nowrap

" Make a tab be 2 spaces both for read and when editing. If 'shiftwidth' is
" set to 0 it will use the same as 'tabstop'. If 'softtabstop' is set to -1 it
" will use the same as 'shiftwidth'.
set tabstop=2
set shiftwidth=0
set softtabstop=-1

" Use spaces instead of tabs as default
set expandtab

" Tab in front of a line inserts blanks according to 'shiftwidth'
set smarttab

" Copy the indent from the current line when starting a new
set autoindent

" The current implementation of searching in included files can make the
" search slow
set complete-=i

" Characters to use in 'list' mode
if has('patch-7.4.710')
	set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬,space:Â·
else
	set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬
endif

" Ctrl-A over 07 incmrements to 08
set nrformats-=octal

" Where it makes sense, remove comment leader when joining lines
if v:version >= 704
	set formatoptions+=j
endif

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

" }}}
" Functions --------------------------------------------------------------- {{{
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  let isfirst = 1
  let words = []
  for word in split(a:cmdline)
    if isfirst
      let isfirst = 0  " don't change first word (shell command)
    else
      if word[0] =~ '\v[%#<]'
        let word = expand(word)
      endif
      let word = shellescape(word, 1)
    endif
    call add(words, word)
  endfor
  let expanded_cmdline = join(words)
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:  ' . a:cmdline)
  call setline(2, 'Expanded to:  ' . expanded_cmdline)
  call append(line('$'), substitute(getline(2), '.', '=', 'g'))
  silent execute '$read !'. expanded_cmdline
  1
endfunction
" }}}
" Mappings & Abbrevations ------------------------------------------------ {{{

" Stupid fingers
iabbrev paied paid

" Best damn mapleader in the world: SPACE!
let mapleader=' '

nnoremap <silent> <c-l> :nohlsearch<CR>
nnoremap <silent> <leader>- :set nolist!<CR>
nnoremap <silent> <leader>W :echo ":w !sudo tee %"<CR>

" The second lines in the following mappings is for iTerm2 but for them to work
" you need to create a mapping in iterm too so that it sends the correct escape
" sequences. Read more here:
" https://groups.google.com/d/msg/iterm2-discuss/VEiCSc5LCIs/U5fqrwNFm88J

" Add a semicolon without moving the cursor and leaving insert mode
inoremap O2P <ESC>maA;<ESC>`aa

" Go to the end and add a semicolon
inoremap O2R <ESC>A;<ESC>

" }}}
" Automatic commands ------------------------------------------------------- {{{

if has("autocmd") && !exists("autocommands_loaded")

	let autocommands_loaded = 1

	" Auto-source config files when changed
	autocmd BufWritePost vimrc source %

	" Auto-source colorscheme when changed
	autocmd BufWritePost leya.vim source %

	" Add default content when creating PHP files
	autocmd BufNewFile *.php call setline(1, ['<?php', '', '']) | call setpos('.', [0, 3, 0, 0]) | startinsert

	" Add dashes as part of keyword in CSS files
	autocmd BufRead,BufNewFile CSS setlocal iskeyword+=-

	" Make vim see Vagrantfile as a ruby file
	autocmd BufRead,BufNewFile Vagrantfile setlocal filetype=ruby

	" Make vim see javascript template files as html
	autocmd BufNewFile,BufRead *.jst setlocal filetype=jst

	" Enable spellchecking in git commit messages
	autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

	" Set textwidth to 80 when editing branch descriptions
	autocmd BufNewFile,BufRead BRANCH_DESCRIPTION setlocal textwidth=78

	" Set textwidth for multiple filetypes
	autocmd FileType MAIL,VIMWIKI,README setlocal textwidth=78

	" Make sure editing crontab works in OS X
	if has('mac')
		autocmd FileType crontab set nobackup nowritebackup
	endif

	" Add smarty gettext tags to surround
	autocmd FileType smarty let b:surround_103 = "{t}\r{/t}"

	" PHP
	autocmd FileType PHP let b:commentary_format = '// %s'

	" VimWiki
	autocmd FileType vimwiki set foldlevel=2

endif

" }}}
" Plugin configurations ------------------------------------------------------- {{{

" Matchit plugin comes with vim (see :e $VIMRUNTIME/macros/matchit.txt)
runtime macros/matchit.vim

" Auto-pairs
let g:AutoPairsShortcutFastWrap = '<C-S-F>'
let g:AutoPairsShortcutBackInsert = '<C-S-B>'
let g:AutoPairsFlyMode = 1
let g:AutoPairsCenterLine = 0

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list=1
let g:syntastic_auto_jump=2
let g:syntastic_html_tidy_blocklevel_tags = ['a']
let g:syntastic_html_tidy_quiet_messages = { "level": "warnings"  }
let g:syntastic_php_phpmd_post_args = '~/Sources/dotfiles/phpmd.xml'
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'

" UltiSnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ["snips"]
let g:UltiSnipsNoPythonWarning = 1
let g:UltiSnipsSnippetsDir = "~/.vim/bundle/vim-marlun/snips"
map <leader>s :UltiSnipsEdit<cr>

" Neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#use_vimproc = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_select = 1
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-l> neocomplete#complete_common_string()

" Niffler
let g:niffler_ignore_extensions = ['gif', 'jpg', 'png']
let g:niffler_ignore_dirs = ['cache', 'node_modules', 'templates_c', 'vendor', 'build', 'dist']
map <leader>l :NifflerBuffer<cr>
map <leader>o :Niffler .<cr>
map <leader>t :NifflerTags %<cr>
map <leader>T :NifflerTags<cr>
map <leader>r :NifflerMRU<cr>

" VimWiki
let g:vimwiki_list = [{
  \ 'path': '~/Documents/VimWiki/',
  \ 'syntax': 'markdown',
  \ 'ext': '.md' }]
let g:vimwiki_hl_cb_checked = 2
let g:vimwiki_table_auto_fmt = 0
let g:vimwiki_global_ext = 0

" vim-emmet
let g:user_emmet_leader_key = '<c-e>'

" vim: foldmethod=marker
