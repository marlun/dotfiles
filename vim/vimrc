" Vim configuration file by Martin Lundberg <martin.lundberg@gmail.com>

" Plugins ------------------------------------------------------------------- {{{

call plug#begin('~/.vim/bundle')

" Personal
Plug 'marlun/vim-marlun'
Plug 'marlun/vim-starwars'

" Vim extensions
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-fugitive'
Plug 'jiangmiao/auto-pairs'
Plug 'pgdouyon/vim-niffler'
Plug 'w0rp/ale'
Plug 'wellle/targets.vim'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-indent'
Plug 'tyru/open-browser.vim'
Plug 'pechorin/any-jump.vim'
Plug 'SirVer/ultisnips'
Plug 'metakirby5/codi.vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'airblade/vim-gitgutter'
" Plug 'dhruvasagar/vim-table-mode'
" Plug 'vim-utils/vim-troll-stopper'

" Language support
Plug 'sukima/xmledit'
Plug 'pangloss/vim-javascript'
Plug 'moll/vim-node'
Plug 'jparise/vim-graphql'
" Plug 'fatih/vim-go'

call plug#end()

" }}}
" General ------------------------------------------------------------------ {{{

" Enable syntax highlighting and choose colorscheme
syntax on

" Load my own colorscheme if available
if findfile('colors/kylo.vim', &rtp) != ''
  colorscheme kylo
endif

" Make sure needed folders exist
if !isdirectory($HOME."/.vim/undo")
  echoerr "undodir does not exist"
endif

set encoding=utf-8
set noswapfile
set directory=~/tmp,/var/tmp,/tmp
set wildignorecase
set wildignore+=DS_Store,tags,*/node_modules/*,*/smarty/*,*/tiny_mce/*,*/bower_components/*,*/vendor/*
set wildmenu
set wildmode=list:longest,full
set hidden
set showcmd
set noshowmode
set lazyredraw
set synmaxcol=256
set shortmess+=a
set laststatus=2
set incsearch
set hlsearch
set backspace+=indent,eol,start
set nowrap
set expandtab
set smarttab
set autoindent
set completeopt-=preview
set tabstop=2
set shiftwidth=2
set softtabstop=2
set thesaurus+=~/Documents/mthesaur.txt
set undodir=~/.vim/undo
set undofile

" Use system clipboard (if supported)
set clipboard=unnamed

" To make it easier to search for things I make vim ignore case except when
" the search pattern contains upper case characters
set ignorecase smartcase

" Do upward search for tags file
set tags=./tags;,tags;

" Remove /usr/include from default 'path' since I've never used this
set path-=/usr/include

" Try safe (:h secure) source of project specific .vimrc file
set exrc
set secure

" Add swedish as a recognized language when spellchecking
set spelllang=en,sv

" Add dictionary for completion
set dictionary=/usr/share/dict/words

" Clean status line with only filename, flags and line:column. If you want
" more information you can use Ctrl-g which I've added extra information to
set statusline=%f " Filename
set statusline+=\ %m%r%w " Modified, Readonly and Preview flags
set statusline+=%= " Switch to right side
set statusline+=[%l:%v] " Cursor position

" The current implementation of searching in included files can make the
" search slow
set complete-=i

" Ctrl-A over 07 incmrements to 08
set nrformats-=octal

" Use ag when running :grep
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

" Use rip-grep as grepping program if available
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" Characters to use in 'list' mode
if has('patch-7.4.710')
  set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬,space:Â·
else
  set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬
endif

" Where it makes sense, remove comment leader when joining lines
if has('patch-7.3.541')
  set formatoptions+=j
endif

" Makes it possible to have different cursor types for different modes:
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

" Disable background color erase
let &t_ut=''

" Cursor settings:
" 1 -> blinking block
" 2 -> solid block
" 3 -> blinking underscore
" 4 -> solid underscore
" 5 -> blinking vertical bar
" 6 -> solid vertical bar

" }}}
" Functions & Commands -------------------------------------------------- {{{

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made. Only define it when not
" defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                  \ | wincmd p | diffthis
endif

" Used to write a journal
if !exists(":Write")
  command Write execute 'e' '~/Documents/notes/commitments/journal/' . strftime('%Y') . '/' . strftime('%Y-%m-%d') . '.md'
endif

" }}}
" Mappings & Abbrevations ------------------------------------------------ {{{

" Stupid fingers
iabbrev paied paid

" Best damn mapleader in the world: SPACE!
let mapleader=' '

nnoremap <silent> <c-l> :nohlsearch<CR>
nnoremap <silent> <Esc>u :set hlsearch!<CR>
nnoremap <silent> <leader>- :set nolist!<CR>
nnoremap <silent> <leader>w :Write<CR>
nnoremap <c-w>T :tabnew %<CR>

" Use Ctrl-n and Ctrl-p to move up and down in command-line history but use
" what's before the cursor when searching
cnoremap <c-n> <down>
cnoremap <c-p> <up>

" You can use <Up> to recall earlier commands from the history but I don't
" like moving my hand down to the arrow-keys.
cnoremap <C-o> <Up>

" Uppercase word before cursor
inoremap <C-f> <ESC>gUiw`]a

" CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo, so
" that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Add filetype
nnoremap <silent> <C-g> :file<Bar>echon ' [' &filetype '/' &fileencoding '/' &fileformat ']'<CR>

" Faster way to move between linting problems
nnoremap ]e :lnext<CR>
nnoremap [e :lprev<CR>

" Save using sudo if you don't have permission to save to a file
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Break up inserts into smaller undo-chunks
inoremap . .<c-g>u
inoremap , ,<c-g>u
inoremap ? ?<c-g>u
inoremap ! !<c-g>u
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" Navigational mappings
" nnoremap <leader>r :browse filter // oldfiles<S-Left><Left><Left>
" nnoremap <leader>l :ls<CR>:b<Space>
" nnoremap <leader>o :find<Space>

" For the following mappings to work you need to create a mapping in iTerm2 so
" that it sends the correct escape sequences. Read more here:
" https://groups.google.com/d/msg/iterm2-discuss/VEiCSc5LCIs/U5fqrwNFm88J

" Add a semicolon without moving the cursor and leaving insert mode
" (O2P = Shift-Enter)
inoremap O2P <ESC>maA;<ESC>`aa

" Go to the end and add a semicolon (O2R = Ctrl-Enter)
inoremap O2R <ESC>A;<ESC>

" Copy the filename to clipboad on a Mac
nnoremap <silent> <leader>c :let @*=expand("%:p")<CR>

" }}}
" Automatic commands ------------------------------------------------------- {{{

if has("autocmd") && !exists("autocommands_loaded")

  let autocommands_loaded = 1

  " Auto-source colorscheme when changed
  autocmd BufWritePost leya.vim source %
  autocmd BufWritePost darth.vim source %
  autocmd BufWritePost kylo.vim source %

  " Insert date header when starting a new journal entry
  autocmd BufNewFile */journal/** exe "normal i# " . strftime("%F") . "\n\n" | startinsert

  " Add dashes as part of keyword in CSS files
  autocmd BufRead,BufNewFile CSS setlocal iskeyword+=-

  " Enable spellchecking in git commit messages
  autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

  " Set textwidth for multiple filetypes
  autocmd FileType README*,MAIL setlocal textwidth=78

  " Settings for writing mail
  autocmd FileType MAIL setlocal formatoptions=tqj spell

  " Make sure editing crontab works in OS X
  if has('mac')
    autocmd FileType crontab set nobackup nowritebackup
  endif

  " Add smarty gettext tags to surround
  autocmd FileType smarty let b:surround_103 = "{t}\r{/t}"

  " PHP
  autocmd FileType PHP let b:commentary_format = '// %s'

  " Markdown
  autocmd FileType markdown setlocal foldlevel=1 textwidth=78 spell

  " Add syntax highlighting for the ESLint configuration file
  autocmd BufNewFile,BufRead .eslintrc set filetype=json

  " Setup syntax highlighting for tagged template strings
  " call jspretmpl#register_tag('html', 'html')
  " call jspretmpl#register_tag('css', 'css')
  " autocmd FileType javascript JsPreTmpl html

  " Autocomplete using language server for JavaScrtip
	autocmd FileType javascript setlocal omnifunc=lsp#complete

  " Set 'formatoptions' for journal
  autocmd BufNewFile,BufRead journal.txt setlocal fo=t2an ts=4 sw=4 sts=4

  " Settings for todo
  autocmd BufRead TODO.md setlocal ts=2 sw=2 sts=2 foldlevel=1

  " Automatically create directories for new files
  if exists('*mkdir')
    " au BufWritePre,FileWritePre * silent! call mkdir(expand('<afile>:p:h'), 'p')
    au BufWritePre,FileWritePre * call mkdir(expand('<afile>:p:h'), 'p')
  endif

endif

" }}}
" Neovim specifics ------------------------------------------------------- {{{
if has('nvim')
  set inccommand=nosplit
  nnoremap <F12> :vs<bar>:term tig<CR>i
endif

" }}}
" Plugin configurations ------------------------------------------------------- {{{

" Concealing quotes in JSON files is just annoying
let g:vim_json_conceal = 0

" Matchit plugin comes with vim (see :e $VIMRUNTIME/macros/matchit.txt)
runtime macros/matchit.vim

" Auto-pairs
let g:AutoPairsFlyMode = 1
let g:AutoPairsCenterLine = 0

" UltiSnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ["snips"]
let g:UltiSnipsNoPythonWarning = 1
let g:UltiSnipsSnippetsDir = "~/.vim/bundle/vim-marlun/snips"
map <leader>s :UltiSnipsEdit<cr>

" Niffler
let g:niffler_ignore_extensions = ['gif', 'jpg', 'png', 'svg']
let g:niffler_ignore_dirs = ['cache', 'node_modules', 'templates_c', 'vendor', 'build', 'dist', 'coverage', 'journal', 'cdn']
let g:niffler_fuzzy_char = ";"
map <leader>l :NifflerBuffer<cr>
map <leader>o :Niffler .<cr>
map <leader>t :NifflerTags %<cr>
map <leader>r :NifflerMRU<cr>
map <leader>d :Niffler ~/Library/Mobile Documents/com~apple~CloudDocs/Documents/notes<cr>
map <leader>. :Niffler ~/code/dotfiles<cr>

" ALE
let g:ale_virtualtext_cursor = 1
" let g:ale_hover_cursor = 0
let g:ale_linters = { 'javascript': ['standard'] }
let g:ale_fixers = {
\   'typescript': ['prettier'],
\   'typescriptreact': ['prettier'],
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\}
let g:ale_fix_on_save = 1
let g:ale_javascript_standard_options = '--env browser'
nmap <silent> ]e <Plug>(ale_next)
nmap <silent> [e <Plug>(ale_previous)
nnoremap <F3> :ALERename<CR>

" Signify
let g:signify_realtime = 1
let g:signify_cursorhold_normal = 0
let g:signify_cursorhold_insert = 0

" Open browser
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

" vim: foldmethod=marker
