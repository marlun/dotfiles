" Vim configuration file by Martin Lundberg <martin.lundberg@gmail.com>

" Plugins ------------------------------------------------------------------- {{{

call plug#begin('~/.vim/bundle')

" Personal
Plug 'marlun/vim-marlun'
Plug 'marlun/vim-starwars'

" Vim extensions
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-fugitive'
Plug 'vim-utils/vim-husk'
Plug 'bronson/vim-trailing-whitespace'
Plug 'regedarek/ZoomWin'
Plug 'jiangmiao/auto-pairs'
Plug 'pgdouyon/vim-niffler'
Plug 'SirVer/ultisnips'
Plug 'neomake/neomake',
Plug 'ludovicchabant/vim-gutentags'
Plug 'editorconfig/editorconfig-vim'
Plug 'itchyny/vim-gitbranch' " Shown on Ctrl-g
Plug 'airblade/vim-gitgutter'

" Language support
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'sukima/xmledit'
Plug 'ternjs/tern_for_vim'
Plug 'pangloss/vim-javascript'

" Auto-completion
" if has('lua') && has('patch-7.3.885')
" 	Plug 'Shougo/neocomplete'
" 	Plug 'Shougo/vimproc.vim', { 'do': 'make' }
" else
" 	Plug 'Shougo/neocomplcache.vim'
" endif

call plug#end()

" }}}
" General ------------------------------------------------------------------ {{{

" Enable syntax highlighting and choose colorscheme
syntax on

" Load my own colorscheme if available but fallback to one that comes with vim
if findfile('colors/darth.vim', &rtp) != ''
	colorscheme darth
else
	colorscheme delek
endif

set encoding=utf-8
set noswapfile
set directory=~/tmp,/var/tmp,/tmp
set wildignorecase
set wildignore+=DS_Store,tags,*/node_modules/*,*/smarty/*,*/tiny_mce/*,*/bower_components/*
set wildmenu
set wildmode=longest:full,full

" Use system clipboard (if supported)
set clipboard=unnamed

" To make it easier to search for things I make vim ignore case except when
" the search pattern contains upper case characters
set ignorecase smartcase

" Do upward search for tags file
set tags=./tags;,tags;

" Try safe (:h secure) source of project specific .vimrc file
set exrc
set secure

" Add swedish as a recognized language when spellchecking
set spelllang=en,sv

" Add dictionary for completion
set dictionary=/usr/share/dict/words

" }}}
" Interface ---------------------------------------------------------------- {{{

set hidden
set showcmd
set noshowmode
set nohlsearch
set incsearch
set lazyredraw
set synmaxcol=256
set shortmess+=a
set laststatus=2
set incsearch
set hlsearch

" First list all matches and complete till longest common string, then
" complete to the next full match
set wildmode=list:longest,full

" Clean status line with only filename, flags and line:column. If you want
" more information you can use Ctrl-g which I've added extra information to
set statusline=%f " Filename
set statusline+=\ %m%r%w " Modified, Readonly and Preview flags
set statusline+=%= " Switch to right side
set statusline+=[%l:%v] " Cursor position

" Makes it possible to have different cursor types for different modes.
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
elseif !has("gui_running")
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}
" Editor ------------------------------------------------------------------- {{{

set backspace+=indent,eol,start
set nowrap
set expandtab
set smarttab
set autoindent
set completeopt-=preview
set tabstop=2
set shiftwidth=2
set softtabstop=2

" The current implementation of searching in included files can make the
" search slow
set complete-=i

" Ctrl-A over 07 incmrements to 08
set nrformats-=octal

" Characters to use in 'list' mode
if has('patch-7.4.710')
	set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬,space:Â·
else
	set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬
endif

" Where it makes sense, remove comment leader when joining lines
if has('patch-7.3.541')
	set formatoptions+=j
endif

" Use ag when running :grep
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

" }}}
" Functions & Commands -------------------------------------------------- {{{

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made. Only define it when not
" defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                  \ | wincmd p | diffthis
endif

" Runs a shell command and shows the result on the command-line inside vim
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  let isfirst = 1
  let words = []
  for word in split(a:cmdline)
    if isfirst
      let isfirst = 0  " don't change first word (shell command)
    else
      if word[0] =~ '\v[%#]'
        let word = expand(word)
      endif
      if word[0] != '<'
        let word = shellescape(word, 1)
      endif
    endif
    call add(words, word)
  endfor
  let expanded_cmdline = join(words)
  echom substitute(system(expanded_cmdline), '[[:cntrl:]]', '', 'g')
endfunction

" }}}
" Mappings & Abbrevations ------------------------------------------------ {{{

" Stupid fingers
iabbrev paied paid

" Best damn mapleader in the world: SPACE!
let mapleader=' '

nnoremap <silent> <c-l> :nohlsearch<CR>
nnoremap <silent> <Esc>u :set hlsearch!<CR>
nnoremap <silent> <leader>- :set nolist!<CR>

" Use Ctrl-n and Ctrl-p to move up and down in command-line history but use
" what's before the cursor when searching
cnoremap <c-n> <down>
cnoremap <c-p> <up>

" You can use <Up> to recall earlier commands from the history but I don't
" like moving my hand down to the arrow-keys.
cnoremap <C-o> <Up>

" Uppercase word before cursor
inoremap <C-f> <ESC>gUiw`]a

" CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo, so
" that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Add filetype
nnoremap <silent> <C-g> :file<Bar>echon ' [' &filetype '/' &fileencoding '/' &fileformat '] (' gitbranch#name() ')'<CR>

" Navigational mappings
" nnoremap <leader>r :browse filter // oldfiles<S-Left><Left><Left>
" nnoremap <leader>l :ls<CR>:b<Space>
" nnoremap <leader>o :find<Space>

" For the following mappings to work you need to create a mapping in iTerm2 so
" that it sends the correct escape sequences. Read more here:
" https://groups.google.com/d/msg/iterm2-discuss/VEiCSc5LCIs/U5fqrwNFm88J

" Add a semicolon without moving the cursor and leaving insert mode
" (O2P = Shift-Enter)
inoremap O2P <ESC>maA;<ESC>`aa

" Go to the end and add a semicolon (O2R = Ctrl-Enter)
inoremap O2R <ESC>A;<ESC>

" }}}
" Automatic commands ------------------------------------------------------- {{{

if has("autocmd") && !exists("autocommands_loaded")

	let autocommands_loaded = 1

	" Auto-source config files when changed
	" autocmd BufWritePost vimrc source %

	" Auto-source colorscheme when changed
	autocmd BufWritePost leya.vim source %

	" Add default content when creating PHP files
	autocmd BufNewFile *.php call setline(1, ['<?php', '', '']) | call setpos('.', [0, 3, 0, 0]) | startinsert

	" Add dashes as part of keyword in CSS files
	autocmd BufRead,BufNewFile CSS setlocal iskeyword+=-

	" Make vim see Vagrantfile as a ruby file
	autocmd BufRead,BufNewFile Vagrantfile setlocal filetype=ruby

	" Make vim see javascript template files as html
	autocmd BufNewFile,BufRead *.jst setlocal filetype=jst
  if  exists(':JsPreTmpl')
    autocmd FileType javascript JsPreTmpl html
  endif

	" Enable spellchecking in git commit messages
	autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

	" Set textwidth to 80 when editing branch descriptions
	autocmd BufNewFile,BufRead BRANCH_DESCRIPTION setlocal textwidth=78

	" Set textwidth for multiple filetypes
	autocmd FileType README* setlocal textwidth=78

  " Settings for writing mail
	autocmd FileType MAIL setlocal textwidth=78 formatoptions=tqj spell

	" Make sure editing crontab works in OS X
	if has('mac')
		autocmd FileType crontab set nobackup nowritebackup
	endif

	" Add smarty gettext tags to surround
	autocmd FileType smarty let b:surround_103 = "{t}\r{/t}"

	" PHP
	autocmd FileType PHP let b:commentary_format = '// %s'

	" VimWiki
	autocmd FileType vimwiki setlocal foldlevel=2 textwidth=78
	autocmd FileType markdown setlocal foldlevel=1 textwidth=78

	" Add syntax highlighting for the ESLint configuration file
	autocmd BufNewFile,BufRead .eslintrc set filetype=json

  " When editing a file, always jump to the last known cursor position.  Don't
  " do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

endif

" }}}
" Plugin configurations ------------------------------------------------------- {{{

" Configure default plugins
let g:markdown_folding = 1

" Matchit plugin comes with vim (see :e $VIMRUNTIME/macros/matchit.txt)
runtime macros/matchit.vim

" Auto-pairs
let g:AutoPairsFlyMode = 1
let g:AutoPairsCenterLine = 0

" Syntastic
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list=1
" let g:syntastic_auto_jump=2
" let g:syntastic_html_tidy_blocklevel_tags = ['a']
" let g:syntastic_html_tidy_quiet_messages = { "level": "warnings"  }
" let g:syntastic_php_phpmd_post_args = '~/Sources/dotfiles/phpmd.xml'
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exec = 'eslint_d'

" Neomake
" let g:neomake_javascript_enabled_makers = ['eslint_d']
" if has("autocmd") && !exists("neomake_autocommands_loaded")
"     let neomake_autocommands_loaded = 1
"     autocmd! BufWritePost,BufEnter *.js Neomake
" endif

" UltiSnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ["snips"]
let g:UltiSnipsNoPythonWarning = 1
let g:UltiSnipsSnippetsDir = "~/.vim/bundle/vim-marlun/snips"
map <leader>s :UltiSnipsEdit<cr>

" Neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#use_vimproc = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_select = 0

" Niffler
let g:niffler_ignore_extensions = ['gif', 'jpg', 'png', 'svg']
let g:niffler_ignore_dirs = ['cache', 'node_modules', 'templates_c', 'vendor', 'build', 'dist']
let g:niffler_fuzzy_char = ";"
map <leader>l :NifflerBuffer<cr>
map <leader>o :Niffler .<cr>
map <leader>t :NifflerTags %<cr>
map <leader>r :NifflerMRU<cr>

" VimWiki
let g:vimwiki_list = [{
  \ 'path': '~/Documents/VimWiki/',
  \ 'syntax': 'markdown',
  \ 'ext': '.md' }]
let g:vimwiki_hl_cb_checked = 2
let g:vimwiki_table_auto_fmt = 0
let g:vimwiki_global_ext = 0
let g:vimwiki_folding = 'list'

" vim-emmet
let g:user_emmet_leader_key = '<c-e>'

" vim: foldmethod=marker

